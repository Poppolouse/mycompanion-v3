import { useState } from 'react';
import './KullaniciSorusu.css';

/**
 * KullanÄ±cÄ±ya soru soran ve cevabÄ±na gÃ¶re Ã¶neriler sunan komponent
 * 
 * @param {Object} props
 * @param {Function} props.onCevapVer - KullanÄ±cÄ± cevap verdiÄŸinde Ã§aÄŸrÄ±lacak fonksiyon
 */
function KullaniciSorusu({ onCevapVer }) {
  const [secilenCevap, setSecilenCevap] = useState('');
  const [cevapVerildi, setCevapVerildi] = useState(false);

  const sorular = [
    {
      id: 'amaÃ§',
      soru: 'ğŸ¤” BugÃ¼n hangi konuda yardÄ±ma ihtiyacÄ±nÄ±z var?',
      cevaplar: [
        {
          id: 'verimlilik',
          metin: 'ğŸ“ˆ Verimlilik ve organizasyon',
          aciklama: 'GÃ¶revlerimi organize etmek ve daha verimli Ã§alÄ±ÅŸmak istiyorum',
          onerilenKategoriler: ['Verimlilik']
        },
        {
          id: 'hesaplama',
          metin: 'ğŸ§® Hesaplama ve matematik',
          aciklama: 'Matematik iÅŸlemleri yapmak ve hesaplamalar yapmak istiyorum',
          onerilenKategoriler: ['AraÃ§lar']
        },
        {
          id: 'bilgi',
          metin: 'ğŸ“Š Bilgi ve araÅŸtÄ±rma',
          aciklama: 'GÃ¼ncel bilgilere ulaÅŸmak ve araÅŸtÄ±rma yapmak istiyorum',
          onerilenKategoriler: ['Bilgi']
        },
        {
          id: 'genel',
          metin: 'ğŸŒŸ Genel kullanÄ±m',
          aciklama: 'FarklÄ± araÃ§larÄ± keÅŸfetmek ve denemek istiyorum',
          onerilenKategoriler: ['TÃ¼mÃ¼']
        }
      ]
    }
  ];

  const handleCevapSec = (cevap) => {
    setSecilenCevap(cevap);
    setCevapVerildi(true);
    
    // KÄ±sa bir gecikme ile cevabÄ± parent komponente gÃ¶nder
    setTimeout(() => {
      onCevapVer(cevap);
    }, 500);
  };

  const handleTekrarSor = () => {
    setSecilenCevap('');
    setCevapVerildi(false);
  };

  return (
    <div className="kullanici-sorusu">
      <div className="soru-container">
        <div className="soru-header">
          <h2 className="soru-baslik">
            {sorular[0].soru}
          </h2>
          <p className="soru-alt-baslik">
            Size en uygun araÃ§larÄ± Ã¶nerebilmem iÃ§in lÃ¼tfen bir seÃ§enek belirleyin
          </p>
        </div>

        {!cevapVerildi ? (
          <div className="cevaplar-grid">
            {sorular[0].cevaplar.map((cevap) => (
              <button
                key={cevap.id}
                className="cevap-kartÄ±"
                onClick={() => handleCevapSec(cevap)}
              >
                <div className="cevap-ikon">
                  {cevap.metin.split(' ')[0]}
                </div>
                <div className="cevap-icerik">
                  <h3 className="cevap-baslik">
                    {cevap.metin.substring(cevap.metin.indexOf(' ') + 1)}
                  </h3>
                  <p className="cevap-aciklama">
                    {cevap.aciklama}
                  </p>
                </div>
              </button>
            ))}
          </div>
        ) : (
          <div className="cevap-onay">
            <div className="onay-ikon">âœ…</div>
            <h3 className="onay-baslik">Harika seÃ§im!</h3>
            <p className="onay-mesaj">
              <strong>{secilenCevap.metin}</strong> kategorisine uygun araÃ§larÄ± size gÃ¶steriyorum...
            </p>
            <button 
              className="tekrar-sor-btn"
              onClick={handleTekrarSor}
            >
              ğŸ”„ FarklÄ± bir seÃ§enek dene
            </button>
          </div>
        )}
      </div>
    </div>
  );
}

export default KullaniciSorusu;